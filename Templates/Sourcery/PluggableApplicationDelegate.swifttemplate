// swiftlint:disable all

import UIKit

class AppDelegate: NSObject, UIApplicationDelegate {
	var window: UIWindow?
}

<%
for type in types.classes where type.based["ApplicationService"] != nil {
	if type.attributes["UIApplicationMain"] != nil {
		-%>
#error("A class called <%= type.name %> with the attribute @UIApplicationMain has been defined; please use classes implementing the ApplicationService protocol instead")
		<%
		break
	}
}
-%>

<%
var methods: [String: SourceryRuntime.Method] = [:]
var methodsInfo: [String: [String]] = [:]
for type in types.classes where type.based["UIApplicationDelegate"] != nil {
	if type.attributes["UIApplicationMain"] != nil {
		continue
	}

	if let sharedVariable = type.staticVariables.first(where: { $0.name == "shared" }) {
	_%>
let instance<%= type.name %> = <%= type.name %>.shared<%
	} else {
	_%>
let instance<%= type.name %> = <%= type.name %>()<%
	}

	for method in type.instanceMethods where
		!method.isClass
		&& ["internal", "public", "open"].contains(method.accessLevel)
		&& method.parameters.first?.typeName.name == "UIApplication"
	{
		if methods[method.selectorName] == nil {
			methods[method.selectorName] = method
		}
		methodsInfo[method.selectorName, default: []].append(type.name)
	}
}
_%>

extension AppDelegate {
<%
	let sortedMethodsInfo = methodsInfo.sorted { $0.key < $1.key }
	for (methodSelectorName, serviceNames) in sortedMethodsInfo {
		guard let method = methods[methodSelectorName] else {
			continue
		}
-%>
	func <%= method.name %><% if method.actualReturnTypeName.name != "Void" { -%> -> <%= method.returnTypeName.name %> <% } -%> {
		<% for parameter in method.parameters {
			if let closure = parameter.typeName.closure {
			func generateArgumentsTuple() {
				for (index, parameter) in closure.parameters.enumerated() { %>param<%= index %>: <%= parameter.typeName.name %><% if index < closure.parameters.count - 1 { -%>, <% } }
			}
		%>
		var <%= parameter.name %>Results: [(<% if !closure.parameters.isEmpty { generateArgumentsTuple() %>, tupleCodeGenerationHelper: Void <% } %>)] = []
		let <%= parameter.name %>DispatchGroup = DispatchGroup()
		<%= parameter.name %>DispatchGroup.enter()
		<%= parameter.name %>DispatchGroup.notify(queue: DispatchQueue.main) {
			guard let firstResult = <%= parameter.name %>Results.first else {
				return
			}
			_ = firstResult
			<%= parameter.name %>(
				<% for (index, closureParameter) in closure.parameters.enumerated() {
					if closureParameter.typeName.name == "Bool" {
						%><%= parameter.name %>Results.reduce(false) { $0 || $1.param<%= index %> }<%
					} else if closureParameter.typeName.isArray {
						%>{
					let results = <%= parameter.name %>Results<% if closureParameter.typeName.isOptional { %>.compactMap { $0.param<%= index %> }<% } %>
					if results.isEmpty {
						return nil
					}
					return results.flatMap { $0 }
				}() <%
					} else if closureParameter.typeName.isDictionary {%>{
					let results = <%= parameter.name %>Results<% if closureParameter.typeName.isOptional { %>.compactMap { $0.param<%= index %> }<% } %>
					if results.isEmpty {
						return nil
					}
					return Dictionary(results.flatMap { $0 }, uniquingKeysWith: { value1, _ in value1 })
				}() <%
					} else {
				%>firstResult.param<%= index %><%
					}
				if index < closure.parameters.count - 1 { -%>, <% }
				} %>
			)
		}
		let <%= parameter.name %>Param = { (<% generateArgumentsTuple() %>) in
			<%= parameter.name %>Results.append((<% if !closure.parameters.isEmpty { for (index, parameter) in closure.parameters.enumerated() { %>param<%= index %><% } %>, ()<% } %>))
			<%= parameter.name %>DispatchGroup.leave()
		}
				<%
			} else {
		%>
		let <%= parameter.name %>Param = <%= parameter.name %>
		<%
			}
		}
		%>
		let results<% if method.actualReturnTypeName.name == "Void" { %>: [()]<% } %> = [
<%
		for serviceName in serviceNames {
_%>
			instance<%= serviceName %>.<%= method.callName %>(<% for (index, parameter) in method.parameters.enumerated() { -%><% if let label = parameter.argumentLabel { %><%= label %>: <% } %><%= parameter.name %>Param<% if index < method.parameters.count - 1 { -%>, <% } } -%>),
<%
		}
-%>
		]
		<%
		switch method.actualReturnTypeName.name {
			case "Void":
		%>
		_ = results<%
			case "Bool":
		%>
		return results.reduce(false) { $0 || $1 }<%
			case "UISceneConfiguration":
		%>
		return results.first!<%
			case "UIInterfaceOrientationMask":
		%>
		return results.first!<%
			default:
				if method.isOptionalReturnType {
		%>
		return results.compactMap { $0 }.first<%
				}
		}
		%>
	}

<%_ } -%>
}
