// swiftlint:disable all

import Foundation
<%= argument["imports"] as? String ?? "" %>

protocol RawDecodable: RawRepresentable, Decodable {
	static func defaultDecoderValue(_ decoder: Decoder) throws -> Self
}

extension RawDecodable {
	public static func defaultDecoderValue(_ decoder: Decoder) throws -> Self {
		throw DecodingError.dataCorrupted(.init(codingPath: decoder.codingPath, debugDescription: "Raw value not recognized for type \(self)."))
	}
}

extension RawDecodable where RawValue: Decodable {
	init(from decoder: Decoder) throws {
		let value = try decoder.singleValueContainer().decode(RawValue.self)
		self = try Self(rawValue: value) ?? Self.defaultDecoderValue(decoder)
	}
}

protocol RawEncodable: RawRepresentable, Encodable {
}

extension RawEncodable where RawValue: Encodable {
	func encode(to encoder: Encoder) throws {
		var container = encoder.singleValueContainer()
		try container.encode(rawValue)
	}
}

<%

func toSnakeCase(_ string: String) -> String {
	let regex = try! NSRegularExpression(pattern: "([a-z0-9])([A-Z])", options: [])
	let range = NSRange(location: 0, length: (string as NSString).length)
	return regex.stringByReplacingMatches(in: string, options: [], range: range, withTemplate: "$1_$2").lowercased()
}

func decodeVariable(_ variable: Variable, prefix: String, forKey key: String) {
	if variable.annotations["skipDecoding"] == nil {
		let decodingType = variable.annotations["decodingType"] as? String ?? (variable.typeName.isOptional ? variable.typeName.unwrappedTypeName : variable.typeName.name)
		let hasAlias = variable.annotations["decodeAlias"] as? String != nil
		let defaultName = "\(variable.name)_default"
		if let defaultValue = variable.annotations["default"] as? String { %>
		let <%= defaultName %>: <%= variable.typeName.name %> = <%= defaultValue %>
<%
		} -%>
		<%= prefix %> = <%= hasAlias ? "try (try?" : "try" %> container.decode<% if variable.typeName.isOptional || variable.typeName.isArray || variable.typeName.isDictionary || variable.annotations["decodeAlias"] != nil || variable.annotations["default"] != nil { -%>IfPresent<% } -%>(<%= decodingType %>.self, forKey: .<%= key %>)<% if hasAlias { %>)
				.flatMap { $0 }<% } %>
<%
		if let decodeAlias = variable.annotations["decodeAlias"] as? String {
-%>
				?? {
<%
			if decodeAlias == "@self" {
-%>
					let aliasContainer = try decoder.singleValueContainer()
					return try aliasContainer.decode<%= variable.typeName.isOptional ? "IfPresent" : "" %>(<%= decodingType %>.self)
<%
			} else {
-%>
					try container.decode<% if variable.typeName.isOptional || variable.typeName.isArray || variable.typeName.isDictionary || variable.annotations["default"] != nil { -%>IfPresent<% } -%>(<%= decodingType %>.self, forKey: .<%= decodeAlias %>)
<%
			}
_%>
				}()
<%
		}
		if variable.annotations["default"] as? String != nil || variable.typeName.isArray || variable.typeName.isDictionary { -%>
				?? <% if variable.annotations["default"] as? String != nil { %><%= defaultName %><% } else { %>[<% if variable.typeName.isDictionary { -%>:<% } -%>]<% } %>
<%
		}
	} else if let defaultValue = variable.annotations["default"] { -%>
		<%= prefix %> = <%= defaultValue %>
<%	} else if variable.typeName.isOptional { -%>
		<%= prefix %> = nil
<%	} else if variable.typeName.isArray || variable.typeName.generic?.name == "Set" { -%>
		<%= prefix %> = []
<%	} else if variable.typeName.isDictionary { -%>
		<%= prefix %> = [:]
<%	} else { -%>
		// Variable marked with `skipDecoding` '\(<%= variable.name %>)' must be set before returning from init(decoder:) (or be an optional, array, set, dictionary, or have a default value annotated using `default`)
		// this initializer will fail at compile if a convenience initializer isn't used
<%	}
}

for type in types.all
	where type.annotations["AutoFieldsKey"] != nil
	|| type.annotations["AutoDecodable"] != nil
	|| type.annotations["AutoEncodable"] != nil
{

func isRawType(_ type: Type) -> Bool {
	return type.based["RawRepresentable"] != nil || (type as? Enum)?.rawType != nil
}

let codableProtocols = [
	type.annotations["AutoDecodable"].map { _ in "\(isRawType(type) ? "Raw" : "")Decodable" },
	type.annotations["AutoEncodable"].map { _ in "\(isRawType(type) ? "Raw" : "")Encodable" },
].compactMap { $0 }
-%>

extension <%= type.name %>: <%= codableProtocols.joined(separator: ", ") %> {
<%

func typeKey(_ enumType: Enum) -> String {
	return enumType.annotations["typeKey"] as? String ?? "type"
}

func hasTypeKey(_ enumType: Enum) -> Bool {
	return !typeKey(enumType).isEmpty
}

var variableKeysArray: [(key: String, value: Variable)] = []

func appendKeyValue(_ key: String, _ value: Variable) {
	if variableKeysArray.map({ $0.key }).contains(key) {
		return
	}
	variableKeysArray.append((key, value))
}

if let enumType = type as? Enum, enumType.rawType == nil { -%>
	private enum UnderlyingType: String, RawDecodable, RawEncodable {
<%
	if hasTypeKey(enumType) {
		appendKeyValue(typeKey(enumType), Variable(name: "_underlyingType", typeName: TypeName("\(enumType.name)Type")))
	}
	for caseType in enumType.cases {
		if !caseType.associatedValues.isEmpty {
			for (index, associatedValue) in caseType.associatedValues.enumerated() {
				let key = associatedValue.annotations["key"] as? String ?? toSnakeCase(associatedValue.localName ?? "data\(index)")
				appendKeyValue(key, Variable(name: key, typeName: associatedValue.typeName))
				if let decodeAlias = associatedValue.annotations["decodeAlias"] as? String, decodeAlias != "@self" {
					appendKeyValue(decodeAlias, Variable(name: decodeAlias, typeName: associatedValue.typeName))
				}
			}
		}
-%>
		case <%= caseType.name %><% if let key = caseType.annotations["key"] { %> = "<%= key %>"<% } else if toSnakeCase(caseType.name) != caseType.name { %> = "<%= toSnakeCase(caseType.name) %>"<% } %>
<%
	}
-%>
	}
<%
} else {
	for variable in (type.storedVariables + type.computedVariables.filter({ $0.annotations["forceCoding"] != nil })) where ["open", "public", "internal"].contains(variable.readAccess) {
		appendKeyValue(variable.annotations["key"] as? String ?? toSnakeCase(variable.name), variable)
	}
}

if !variableKeysArray.isEmpty {
	var codingKeys: Set<String> = Set([]) -%>
	enum CodingKeys: String, CodingKey {
<%
	for (key, variable) in variableKeysArray { -%>
		case <%= variable.name %><% if variable.name != key { %> = "<%= key %>"<% } %>
<%
		if !(type is Enum),
			let decodeAlias = variable.annotations["decodeAlias"] as? String, decodeAlias != "@self",
			!codingKeys.contains(decodeAlias)
		{
			codingKeys.insert(decodeAlias) -%>
		case <%= decodeAlias %>
<%
		}
	}
-%>
	}
<%
}
if type.annotations["AutoDecodable"] != nil && !isRawType(type) {
	let initializer: SourceryRuntime.Method! = type.initializers.filter { !$0.isConvenienceInitializer }.max { $0.parameters.count < $1.parameters.count }
	let isConvenience = type.annotations["AutoDecodable"] as? String == "convenience" && initializer != nil
	let isInline = type.annotations["AutoDecodable"] as? String == "inline"
	if isInline { -%>
	// sourcery:inline:auto:<%= type.name %>.AutoDecodable
<%
	} -%>
	<%= type.accessLevel %> <% if type.kind == "class" { %>convenience <% } %>init(from decoder: Decoder) throws {
<%

	if !variableKeysArray.isEmpty {
-%>
		let container = try decoder.container(keyedBy: CodingKeys.self)
<%
	}
	if let enumType = type as? Enum, enumType.rawType == nil {
		let hasAnyDecodeAliasSelf = enumType.cases.contains { $0.annotations["decodeAlias"] as? String == "@self" }
		let prefix = hasAnyDecodeAliasSelf ? "\t" : ""
		func tryDecodeEnumCase(_ caseType: EnumCase, prefix: String = "") {
			if caseType.associatedValues.count == 0 { %>
			<%= prefix %>self = .<%= caseType.name %>
<%
			} else {
				for (index, associatedValue) in caseType.associatedValues.enumerated() {
					decodeVariable(Variable(name: caseType.name, typeName: associatedValue.typeName, annotations: associatedValue.annotations), prefix: "\(prefix)\tlet \(associatedValue.localName ?? "data\(index)"): \(associatedValue.typeName.name)", forKey: associatedValue.annotations["key"] as? String ?? toSnakeCase(associatedValue.localName ?? "data\(index)"))
				} %>
			<%= prefix %>self = .<%= caseType.name %>(<% for (index, associatedValue) in caseType.associatedValues.enumerated() { %><%= associatedValue.localName.map { "\($0): " } ?? ""%><%= associatedValue.localName ?? "data\(index)" %><% if index < caseType.associatedValues.count - 1 { %>, <% } } %>)
<%
			}
		}
		if hasAnyDecodeAliasSelf { -%>
		do {
<%
		}
		if variableKeysArray.isEmpty {
-%>
		<%= prefix %>let type = try decoder.singleValueContainer().decode(UnderlyingType.self)
<%
		} else {
-%>
		<%= prefix %>let type = try container.decode(UnderlyingType.self, forKey: ._underlyingType)
<%
		}
-%>
		<%= prefix %>switch type {
<%
		for caseType in enumType.cases { -%>
		<%= prefix %>case .<%= caseType.name %>:
<%
			tryDecodeEnumCase(caseType, prefix: prefix)
		}
-%>
		<%= prefix %>}
<%
		if hasAnyDecodeAliasSelf { -%>
		} catch {
<%
			for caseType in enumType.cases where caseType.annotations["decodeAlias"] as? String == "@self" {
				tryDecodeEnumCase(caseType)
			}
-%>
		}
<%
		}
	} else {
		for (key, variable) in variableKeysArray {
			decodeVariable(variable, prefix: isConvenience || type.kind == "class" ? "let \(variable.name): \(variable.typeName.name)" : "self.\(variable.name)", forKey: variable.name)
%>
		_ = <%= variable.name %>
<%
		}
		if let initializer = initializer, isConvenience || type.kind == "class" { -%>

		<% if initializer.throws { %>try <% } %>self.init(
<%
			for (index, parameter) in initializer.parameters.enumerated() where variableKeysArray.contains(where: { $0.value.name == parameter.name }) { -%>
			<%= parameter.argumentLabel.map { "\($0): " } ?? "" %><%= parameter.name %><% if index < initializer.parameters.count - 1 { %>,<% } %>
<%
			}
-%>
		)
<%
		}
	}
-%>
	}
<%
	if isInline { -%>
	// sourcery:end
<%
	}
}

if type.annotations["AutoEncodable"] != nil && !isRawType(type) { -%>
	<%= type.accessLevel %> func encode(to encoder: Encoder) throws {
<%
		if variableKeysArray.isEmpty {
-%>
		var container = encoder.singleValueContainer()
<%
		} else {
-%>
		var container = encoder.container(keyedBy: CodingKeys.self)
<%
		}
	func encodeVariable(_ variable: Variable, name: String, forKey key: String) {
		if variable.annotations["skipEncoding"] == nil {-%>
			try container.encode<% if variable.typeName.isOptional { -%>IfPresent<% } -%>(<%= name %><% if let encodedPath = variable.annotations["encodedPath"] as? String, !encodedPath.isEmpty { %><%= variable.typeName.isOptional ? "?" : "" %>.<%= encodedPath %><% } %><% if !variableKeysArray.isEmpty { %>, forKey: .<%= key %><% } %>)
<%
		} else {-%>
			_ = <%= name %>
<%
		}
	}
	if let enumType = type as? Enum, enumType.rawType == nil { -%>
		switch self {
<%
		for caseType in enumType.cases { -%>
		case .<%= caseType.name %><% if !caseType.associatedValues.isEmpty { %>(<% for (index, associatedValue) in caseType.associatedValues.enumerated() { %>let <%= associatedValue.localName ?? "data\(index)" %><% if index < caseType.associatedValues.count - 1 { %>, <% } } %>)<% } %>:
			try container.encode(UnderlyingType.<%= caseType.name %><% if !variableKeysArray.isEmpty { %>, forKey: ._underlyingType<% } %>)
<%
			for (index, associatedValue) in caseType.associatedValues.enumerated() {
				let name = associatedValue.annotations["key"] as? String ?? toSnakeCase(associatedValue.localName ?? "data\(index)")
				-%>	<%encodeVariable(Variable(name: caseType.name, typeName: associatedValue.typeName, annotations: associatedValue.annotations), name: associatedValue.localName ?? "data\(index)", forKey: name)
			} -%>
<%
		}
-%>
		}
<%
	} else {
		for (key, variable) in variableKeysArray {
			encodeVariable(variable, name: "self.\(variable.name)", forKey: variable.name)
 		}
	}
	if variableKeysArray.isEmpty {
-%>
		_ = container
<% } -%>
	}
<%
}
-%>
}
<%_ } -%>
