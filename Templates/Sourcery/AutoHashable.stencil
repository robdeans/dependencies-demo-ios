// swiftlint:disable all

{% macro combineHashe variable variablePath prefix %}
		{% if variable.isStatic %}type(of: self).{% endif %}{% if prefix %}{{prefix}}.{% if variable.typeName.isOptional %}map { $0.{% endif %}{% endif %}{{ variablePath }}{% if prefix and variable.typeName.isOptional %} }{% endif %}.hash(into: &hasher)
{% endmacro %}

{% macro combineVariableHashes variables %}
	{% for variable in variables where variable.readAccess != "private" and variable.readAccess != "fileprivate" %}
	{% if not variable.annotations.skipHashing %}
	{% if variable.typeName.isTuple %}
	{% for element in variable.typeName.tuple.elements %}
	{% call combineHashe variable element.name variable.name %}
	{% endfor %}
	{% else %}
	{% call combineHashe variable variable.name "" %}
	{% endif %}
	{% endif %}
	{% endfor %}
{% endmacro %}

{% macro addAssociatedValues associatedValues prefix %}{% if associatedValues.count == 1 %}let {{ prefix }}{% else %}{% for associated in associatedValues %}let {{ prefix }}{{ associated.externalName|upperFirstLetter }}{% if not forloop.last %}, {% endif %}{% endfor %}{% endif %}{% endmacro %}

// MARK: - AutoHashable for classes, protocols, structs
{% for type in types.types|!enum where type.implements.AutoHashable or type|annotated:"AutoHashable" %}
// MARK: - {{ type.name }} AutoHashable
extension {{ type.name }}{% if not type.kind == "protocol" and not type.based.NSObject %}: Hashable{% endif %} {
	{{ type.accessLevel }}{% if type.based.NSObject or type.supertype.implements.AutoHashable or type.supertype|annotated:"AutoHashable" or type.supertype.based.Hashable %} override{% endif %} func hash(into hasher: inout Hasher) {
		{% if type.based.NSObject or type.supertype.implements.AutoHashable or type.supertype|annotated:"AutoHashable" or type.supertype.based.Hashable %}
		super.hash(into: hasher)
		{% endif %}
		{% if not type.kind == "protocol" %}
		{% call combineVariableHashes type.storedVariables %}
		{% else %}
		{% call combineVariableHashes type.allVariables %}
		{% endif %}
	}
}
{% endfor %}

// MARK: - AutoHashable for Enums
{% for type in types.enums where type.implements.AutoHashable or type|annotated:"AutoHashable" %}

// MARK: - {{ type.name }} AutoHashable
extension {{ type.name }}: Hashable {
	{{ type.accessLevel }} func hash(into hasher: inout Hasher) {
		switch self {
			{% for case in type.cases %}
			{% if not case.annotations.skipHashing and case.hasAssociatedValue %}case .{{ case.name }}({% call addAssociatedValues case.associatedValues "data" %}):{% else %}case .{{ case.name }}:{% endif %}
			{{ forloop.counter }}.hash(into: &hasher)
			{% if type.computedVariables.count > 0 %}
			{% for variable in type.computedVariables %}{% if variable.annotations.includeInHashing %}{{ variable.name }}.hash(into: &hasher){% endif %}{% endfor %}
			{% endif %}
			{% if not case.annotations.skipHashing and case.hasAssociatedValue %}
			{% if case.associatedValues.count == 1 %}
			data.hash(into: &hasher)
			{% else %}
			{% for associated in case.associatedValues %}data{{ associated.externalName|upperFirstLetter }}.hash(into: &hasher)
			{% endfor %}
			{% endif %}
			{% endif %}
			{% endfor %}
		}
	}
}
{% endfor %}
