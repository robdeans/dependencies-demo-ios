<%

extension String {
	public mutating func lowercaseFirstLetter() {
		if isEmpty {
			return
		}
		replaceSubrange(startIndex...startIndex, with: String(self[startIndex]).lowercased())
	}

	public func lowercasingFirstLetter() -> String {
		var this = self
		this.lowercaseFirstLetter()
		return this
	}
}

func debugDescription(enumType: Enum, isOptional: Bool, path: String, indent: Int) {
    let baseIndentString = String(repeating: " ", count: indent * 4)
    let userIndentString = "\(baseIndentString)\\(i)"
%><%= baseIndentString %>\({ () -> String in
<%= baseIndentString %>      switch <%= path %> {
<% for caseType in enumType.cases {
%><%= baseIndentString %>      case <% if !caseType.associatedValues.isEmpty { %>let<% } %> .<%= caseType.name %><% if !caseType.associatedValues.isEmpty { %>(<% for (offset, associatedValue) in caseType.associatedValues.enumerated() { %><%= associatedValue.localName.map { "\($0): " } ?? "" %><%= associatedValue.externalName.map { "_\($0)" } ?? associatedValue.typeName.name.lowercasingFirstLetter() %><%= offset < caseType.associatedValues.count - 1 ? ", " : ""%><% } %>)<% } %>:
<%= baseIndentString %>          return """
<%= baseIndentString %><%= userIndentString %>  ▹ .<%= caseType.name %><%
for associatedValue in caseType.associatedValues {
    let variableName = associatedValue.externalName.map { "_\($0)" } ?? associatedValue.typeName.name.lowercasingFirstLetter() %>
<%= baseIndentString %><%= userIndentString %>    <% debugDescription(typeName: associatedValue.typeName, type: associatedValue.type, path: "\(variableName)", variableName: variableName, indent: indent * 2 + 1) %>
<% } %>
<%= baseIndentString %>"""
<% }
if isOptional {
%><%= baseIndentString %>      case .none:
<%= baseIndentString %>          return "<%= userIndentString %>  <nil>"
<% }
%><%= baseIndentString %>      }
<%= baseIndentString %>}())<%
}

func debugDescription(typeName: TypeName, path: String, indent: Int) {
    let indentString = "\(String(repeating: " ", count: indent * 4))\\(i)"
    if typeName.isArray || typeName.generic?.name == "Set" || typeName.generic?.name == "OrderedSet" {
%><%= indentString %>  \(<%= path %>.isEmpty ? "<empty>" : zip(<%= path %>.indices, <%= path %>).map { ($0 == <%= path %>.startIndex ? "" : "<%= indentString %>  ") + "[\($0)] \(generateDebugDescription($1, indent: <%= indent %>))" }.joined(separator: "\n"))<%
    } else if typeName.isDictionary {
%><%= indentString %>  \(<%= path %>.isEmpty ? "<empty>" : <%= path %>.keys.enumerated().map { ($0 == 0 ? "" : "<%= indentString %>  ") + "[\($1)] \(generateDebugDescription($1, indent: <%= indent %>))" }.joined(separator: "\n"))<%
    } else {
%><%= indentString %>  \(generateDebugDescription(<%= path %>, indent: <%= indent %>))<%
    }
}

func debugDescription(typeName: TypeName, type: Type?, parentTypeName: TypeName? = nil, path: String, variableName: String? = nil, indent: Int = 0) {
    var type = type
    // Sourcery unfortunately doesn't resolve Generic variable types from generic types properly
    if type == nil,
        typeName.name == "UnderlyingList",
        let parentTypeGenericType = parentTypeName?.generic,
        let firstGenericTypeName = parentTypeGenericType.typeParameters.first?.typeName
    {
        type = types.types.first { $0.name == firstGenericTypeName.generic?.name ?? firstGenericTypeName.name }
    }
    let baseIndentString = String(repeating: " ", count: indent * 4)
    let userIndentString = "\(baseIndentString)\\(i)"
    %><%= parentTypeName == nil ? "" : userIndentString %><%= type != nil ? "▿" : "▹" %> <%= variableName.map { "\($0): \\(type(of: \(path)))" } ?? typeName.name %><% if type?.kind == "class" { %>: \(String(reflecting: toOpaque(<%= path %>)))<% }
    if let enumType = type as? Enum { %>
<% debugDescription(enumType: enumType, isOptional: typeName.isOptional || typeName.isImplicitlyUnwrappedOptional, path: path, indent: indent + 1) %><%
        return
    }
    if let type = type {
        for variable in type.instanceVariables where (!variable.isComputed || variable.annotations["includeInDebugDescription"] != nil) && variable.annotations["skipDebugDescription"] == nil && variable.readAccess != "private" && variable.readAccess != "fileprivate" { %>
<% debugDescription(typeName: variable.typeName, type: variable.type, parentTypeName: typeName, path: "\(path).\(variable.name)", variableName: variable.name, indent: indent + 1) %><% }
    } else { %>
<% debugDescription(typeName: typeName, path: path, indent: indent) %><% }
}
%>

private protocol CustomDebugStringConvertibleWithIndent {
	func debugDescription(indent: Int) -> String
}

func generateDebugDescription(_ any: Any?, indent: Int) -> String {
    (any as? CustomDebugStringConvertibleWithIndent)?.debugDescription(indent: indent) ?? any.map { String(reflecting: $0) } ?? "<nil>"
}

<% for type in types.types where type.annotations["AutoDebugDescription"] != nil { %>
extension <%= type.name %>: CustomDebugStringConvertible {
	<%= type.accessLevel %> var debugDescription: String {
        debugDescription(indent: 0)
    }
}

extension <%= type.name %>: CustomDebugStringConvertibleWithIndent {
	fileprivate func debugDescription(indent: Int) -> String {
        let i = String(repeating: " ", count: indent * 4)
        return """
<% debugDescription(typeName: TypeName(type.name), type: type, path: "self", indent: 0) %>
"""
    }
}

<% } %>

private func toOpaque<Object: AnyObject>(_ object: Object) -> UnsafeMutableRawPointer {
	Unmanaged.passUnretained(object).toOpaque()
}
